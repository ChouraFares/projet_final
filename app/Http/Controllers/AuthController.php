<?php
namespace App\Http\Controllers;

use App\Models\User;
use App\Models\Employe;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Illuminate\Http\Request;



class AuthController extends Controller
{
    public function showLoginForm()
    {
        return view('auth.login');
    }

    public function login(Request $request)
    {
        $credentials = $request->only('email', 'password');

        if (Auth::attempt($credentials,$request->remember)) {
            $user = Auth::user();

            // Vérifier si l'utilisateur appartient à "Achats import"
            if ($user->role === 'TransitAgent') {
                return redirect()->route('transit-achat.dashboard');
            }


            if ($user->role === 'super_admin_transit') {
                return redirect()->route('super-admin-transit.dashboard');
            }
            

            if ($user->role === 'DirecteurGeneral') {
                return redirect()->route('Directeur_General.dashboard');
            }

            if ($user->role === 'admin_assurance') {
                return redirect()->route('admin_assurance.dashboard');
            }
       

            if ($user->role === 'responsable_finance') {
                return redirect()->route('responsable_finance.dashboard');
            }

            if ($user->role === 'supply_chain') {
                return redirect()->route('supply_chain.dashboard');
            }


            if ($user->role === 'user') {
                return redirect()->route('user.dashboard');
            }

            return redirect()->route('dashboard', ['role' => $user->role]);
        }

        return back()->withErrors([
            'email' => 'The provided credentials do not match our records.',
        ]);
    }

    public function showRegistrationForm()
    {
        return view('auth.register');
    }

    public function register(Request $request)
    {
        $request->validate([
            'name' => 'required|string|max:255',
            'email' => 'required|string|email|max:255|unique:users',
            'password' => 'required|string|min:8|confirmed',
            'direction' => 'required|string',
            'supervisor' => 'required|string',
            'affectation' => 'required|string',
        ]);

        // Automatically generate a 4-digit MLE
        $autoGeneratedMLE = str_pad(rand(0, 9999), 4, '0', STR_PAD_LEFT);

        // Check if MLE already exists
        if (Employe::where('MLE', $autoGeneratedMLE)->exists()) {
            return back()->withErrors(['MLE exists. Please try again.']);
        }

        $employe = Employe::create([
            'MLE' => $autoGeneratedMLE,
            'Nom' => $request->name,
            'Prenom' => $request->name,
            'Zone_geographique' => '',
            'Site' => '',
            'Direction' => $request->direction,
            'N+1' => $request->supervisor,
            'Affectation' => $request->affectation,
        ]);

        User::create([
            'name' => $request->name,
            'email' => $request->email,
            'password' => Hash::make($request->password),
            'role' => 'user',
            'MLE' => $employe->MLE,
        ]);

        return redirect()->route('login')->with([
            'success' => 'Account créé avec succès.',
            'autoGeneratedMLE' => $autoGeneratedMLE,
        ]);
    }




    public function dashboard(Request $request)
    {
        $user = Auth::user();

        if ($user->role == 'admin' && $user->employe->Direction === 'RH') {
            return view('admin.dashboard', ['department' => $user->employe->Direction]);
        } else {
            return view('user.dashboard', ['department' => $user->employe->Direction]);
        }
    }




    public function logout(Request $request)
    {
        Auth::logout();
        $request->session()->invalidate();
        $request->session()->regenerateToken();

        return redirect()->route('login');
    }


    public function showChangePasswordForm()
    {
        return view('auth.change-password');
    }

    // Traiter la mise à jour du mot de passe
    public function changePassword(Request $request)
    {
        $user = Auth::user();

    if (!$user) {
        return redirect()->route('login')->withErrors(['message' => 'Vous devez être connecté pour changer votre mot de passe.']);
    }

    
        $request->validate([
            'current_password' => 'required',
            'new_password' => 'required|string|min:8|confirmed',
        ]);
    
        $user = Auth::user();
    
        // Vérifier si le mot de passe actuel est correct
        if (!Hash::check($request->current_password, $user->password)) {
            return back()->withErrors(['current_password' => 'Le mot de passe actuel est incorrect.']);
        }
    
        // Mettre à jour le mot de passe
        $user->password = Hash::make($request->new_password);
        /** @var \App\Models\User $user */
        $user->save(); // Cela devrait fonctionner si $user est une instance de User
    
        return redirect()->route('change-password')->with('success', 'Mot de passe changé avec succès !');
    }

}
